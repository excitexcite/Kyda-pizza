@use "sass:math";
@use "_variables.scss" as *;
@use "_functions.scss" as *;

@mixin adaptive-font($mobileFontSize, $pcFontSize) {
	$fMin: rem($mobileFontSize);
	$fMax: rem($pcFontSize);
	$minW: rem($minWidth);
	$maxW: rem($maxWidthContainer);
	font-size: $fMin;
	@media screen and (min-width: em($minWidth)) {
		// font-size: calc(
		// 	#{$fMin} + #{stripUnits($fMax - $fMin)} *
		// 		((100vw - 320px) / #{stripUnits($maxW - $minW)})
		// );
		font-size: calc(
			#{$fMin} + #{stripUnits($fMax - $fMin)} *
				((100vw - #{$minWidth + px}) / #{stripUnits($maxW - $minW)})
		);
	}
	@media screen and (min-width: em($maxWidthContainer)) {
		font-size: $fMax;
	}
}

// @mixin adaptive-lh($initialSize, $minSize, $type) {
// 	$addSize: $initialSize - $minSize;
// 	@if $type == 1 {
// 		line-height: $initialSize;
// 		@media (max-width: #{$maxWidthContainer + px}) {
// 			#{line-height}: calc(
// 				#{$minSize} + #{$addSize} *
// 					((100vw - 320px) / #{$maxWidthContainer - 320})
// 			);
// 		}
// 	} @else if $type == 2 {
// 		line-height: $initialSize;
// 		@media (min-width: #{$maxWidthContainer + px}) {
// 			line-height: calc(
// 				#{$minSize} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
// 			);
// 		}
// 	} @else {
// 		line-height: calc(
// 			#{$minSize} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
// 		);
// 	}
// }

@mixin adaptive-value-px($property, $initialSize, $minSize, $type) {
	$addSize: $initialSize - $minSize;
	@if $type == 1 {
		#{$property}: $initialSize + px;
		@media (max-width: #{$maxWidthContainer + px}) {
			// #{$property}: calc(
			// 	#{$minSize + px} + #{$addSize} *
			// 		((100vw - 320px) / #{$maxWidthContainer - 320})
			// );
			#{$property}: calc(
				#{$minSize + px} + #{$addSize} *
					((100vw - #{$minWidth + px}) / #{$maxWidthContainer - $minWidth})
			);
		}
	} @else if $type == 2 {
		#{$property}: $initialSize + px;
		@media (min-width: #{$maxWidthContainer + px}) {
			// #{$property}: calc(
			// 	#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
			// );
			#{$property}: calc(
				#{$minSize + px} + #{$addSize} *
					((100vw - #{$minWidth + px}) / #{$maxWidth - $minWidth})
			);
		}
	} @else {
		// #{$property}: calc(
		// 	#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
		// );
		#{$property}: calc(
			#{$minSize +
				px} +
				#{$addSize} *
				((100vw - #{$minWidth + px}) / #{$maxWidth - $minWidth})
		);
	}
}

@mixin adaptive-value($property, $initialSize, $minSize, $type, $measure: rem) {
	@if ($measure == "em") {
		$initialSize: em($initialSize);
		$minSize: em($minSize);
	} @else if ($measure == "rem") {
		$initialSize: rem($initialSize);
		$minSize: rem($minSize);
	} @else {
		$initialSize: stripUnits($initialSize);
		$minSize: stripUnits($minSize);
	}
	$addSize: $initialSize - $minSize;
	// @debug #{em($maxWidthContainer) - em(320)};
	// @debug #{em($maxWidthContainer - 320)};
	@if $type == 1 {
		#{$property}: $initialSize;

		@media (max-width: em($maxWidthContainer)) {
			// #{$property}: calc(
			// 	#{$minSize} + #{stripUnits($addSize)} *
			// 		((100vw - 320px) / #{stripUnits(em($maxWidthContainer - 320))})
			// );
			#{$property}: calc(
				#{$minSize} + #{stripUnits($addSize)} *
					(
						(100vw - #{$minWidth + px}) / #{stripUnits(
								em($maxWidthContainer - $minWidth)
							)}
					)
			);
		}
	} @else if $type == 2 {
		#{$property}: $initialSize;
		@media (min-width: em($maxWidthContainer)) {
			// #{$property}: calc(
			// 	#{$minSize} + #{stripUnits($addSize)} *
			// 		((100vw - 320px) / #{stripUnits(em($maxWidth - 320))})
			// );
			#{$property}: calc(
				#{$minSize} + #{stripUnits($addSize)} *
					(
						(100vw - #{$minWidth + px}) / #{stripUnits(
								em($maxWidth - $minWidth)
							)}
					)
			);
		}
	} @else {
		// #{$property}: calc(
		// 	#{$minSize} +
		// 		#{stripUnits($addSize)} *
		// 		((100vw - 320px) / #{stripUnits(em($maxWidth - 320))})
		// );
		#{$property}: calc(
			#{$minSize} +
				#{stripUnits($addSize)} *
				((100vw - #{$minWidth + px}) / #{stripUnits(em($maxWidth - $minWidth))})
		);
	}
}

@mixin mqd($bp) {
	$w: em($bp);
	@media (max-width: $w) {
		@content;
	}
}

@mixin mqm($bp) {
	$w: em($bp);
	@media (min-width: $w) {
		@content;
	}
}
